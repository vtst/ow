// net.vtst.ow.eclipse.less: An Eclipse module for LESS (http://lesscss.org)
// (c) Vincent Simonet, 2011.  All rights reserved.
//
// This file defines an ANTLR grammar for LESS, to be used by Xtext.
// The current version corresponds to LESS 1.1.4 (with a few limitations, see
// ../README).
//
// One of the main particularities of this grammar is that whitespaces are not
// discarded by the lexer (see below that SPACE is not defined as a "hidden"
// terminal in the grammar definition).  This is because parsing CSS selectors
// requires to consider whitespace (.foo .bar { ... } is not the same as
// .foo.bar { ... }.  An alternative would have been to parse selectors in the
// lexer, but this would have been over-complicated.
// Spaces are handled everywhere in the syntactic rules by the OPT_SPACE rule.
// The convention is that every rule shall include the OPT_SPACE to grab the
// potential space at the end of it.  In other words, this means that a
// call to OPT_SPACE has to be inserted *after* every terminal.  There are a few
// exceptions, because of the SPACE separator, and the priority of operators.  They
// are mentioned by comments in the grammar definition.
// (The reason for *after* instead of *before* is that this works much better
// for content assist, because the context contains the node you're currently
// filling.)

grammar net.vtst.ow.eclipse.less.Less hidden(ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate less "http://www.vtst.net/ow/eclipse/less/Less"


// ****************************************************************************
// Parser

// ----------------------------------------------------------------------------
// Stylesheet and blocks

StyleSheet:
  {StyleSheet} OPT_SPACE statements+=ToplevelStatement*
;

ToplevelOrInnerStatement:
  Mixin
  // LESS accepts @ statements within other blocks, and move them at top level.
  | ImportStatement
  | KeyframesStatement
  | ViewportStatement
  | MediaStatement
  | PageStatement
  | FontFaceStatement
  | CharsetStatement
  | VariableDefinition
;
  
ToplevelStatement:
    ToplevelRuleSet
  | ToplevelOrInnerStatement
  // This is required to avoid issues with syntax coloring when typing a variable definition.
  // There is a validation rule to report the error.
  | {IncompleteToplevelStatement} '@' OPT_SPACE 
;

InnerStatement:
  InnerRuleSet
  | ToplevelOrInnerStatement
  | Declaration
  | InnerExtend
;

Block:
  {Block} '{' OPT_SPACE content=BlockContent '}' OPT_SPACE
;

BlockContent:
  {BlockContent} statement+=InnerStatement*
;

// ----------------------------------------------------------------------------
// @ statements

ImportStatement:
  ('@import' | '@import-multiple' | '@import-once') OPT_SPACE
  ('(' format=IDENT ')' OPT_SPACE)?
  uri=(STRING | Uri) OPT_SPACE media_queries=MediaQueryList ';' OPT_SPACE
;

MediaStatement:
  '@media' OPT_SPACE media_queries=MediaQueryList block=Block
;

MediaQueryList:
  {MediaQueryList} (media_query+=MediaQuery (',' OPT_SPACE media_query+=MediaQuery)*)? 
;

MediaQuery:
  (keyword=('only' | 'not') OPT_SPACE)? media_type=IDENT OPT_SPACE ('and' OPT_SPACE expr+=MediaExpression)*
  | expr+=MediaExpression ('and' OPT_SPACE expr+=MediaExpression)*
  | var=AtVariableTerm OPT_SPACE
;

MediaExpression:
  '(' OPT_SPACE media_feature=MediaFeature OPT_SPACE ':' OPT_SPACE expr=Expr ')' OPT_SPACE
  // This cover '(' OPT_SPACE MediaFeature OPT_SPACE Expr ')' OPT_SPACE
  | '(' OPT_SPACE (term=TerminalTerm | simple_term=TerminalSimpleTerm) OPT_SPACE ')' OPT_SPACE 
;

MediaFeature:
  IDENT
;

PageStatement:
  '@page' OPT_SPACE (':' pseudo_page=IDENT OPT_SPACE)? block=Block
;

FontFaceStatement:
  '@font-face' OPT_SPACE block=Block
;

CharsetStatement:
  '@charset' OPT_SPACE charset=STRING OPT_SPACE ';' OPT_SPACE
;

// http://dev.w3.org/csswg/css-device-adapt/
ViewportStatement:
  ViewportSymbol OPT_SPACE block=Block
;

ViewportSymbol:
  '@viewport'
  | '@-webkit-viewport'
  | '@-moz-viewport'
  | '@-ms-viewport'
  | '@-o-viewport'
;

// ----------------------------------------------------------------------------
// @keyframes
// See http://www.w3.org/TR/css3-animations/#keyframes

KeyframesStatement:
  {KeyframesStatement} KeyframesSymbol SPACE ident=IDENT OPT_SPACE '{' OPT_SPACE content=KeyframesContent '}' OPT_SPACE
;

KeyframesContent:
  statement+=KeyframesInnerStatement+
;

KeyframesInnerStatement:
  KeyframesBlock
  | Mixin
;

KeyframesSymbol:
  '@keyframes'
  | '@-webkit-keyframes'
  | '@-moz-keyframes'
  | '@-ms-keyframes'
  | '@-o-keyframes'
;

KeyframesBlock:
  selector=KeyframesSelector block=Block
;

KeyframesSelector:
  'from' OPT_SPACE
  | 'to' OPT_SPACE
  | PERCENTAGE OPT_SPACE
;

// ----------------------------------------------------------------------------
// @ variables

// Implicit variables can be defined by mixin definitions. 
AtVariableRefTarget:
  Mixin | AtVariableRef | AtVariableDef
;

// This is the same as AtVariable, made different only for syntax highlighting purpose.
AtVariableDef:
  ident=AT_IDENT
;

AtVariableRef:
  variable=[AtVariableRefTarget|AT_IDENT]
;

AtVariableTerm:
    AtVariableRef
  | {At2Variable} ident=AT2_IDENT
;

// The extra ';' before '}' is genereated by CustomizedLessLexer.
AtVariableWithBraces: '@' '{' variable=[AtVariableRefTarget|IDENT_OR_KEYWORD_PREPEND_AT] ';' '}';

// ----------------------------------------------------------------------------
// @ variable definitions

VariableDefinition:
  lhs=VariableDefinitionLhs OPT_SPACE ':' OPT_SPACE expr=Expr ';' OPT_SPACE
;

// This intermediate class is useful only for syntax highlighting purpose
VariableDefinitionLhs:
  variable=AtVariableDef
;

// ----------------------------------------------------------------------------
// Mixins

// The same set of rules parses mixin definitions and mixin calls.  This is to make the
// grammar LL(*) despite the recursive Term rule.
// See LessJavaValidator.checkMixin

Mixin:
  selectors=MixinSelectors
  ((
    parameters=MixinParameters (priority=Priority ';' OPT_SPACE | guards=MixinDefinitionGuards? body=Block)
  ) | (
    priority=Priority ';' OPT_SPACE    
  ))
;

MixinSelectors:
  selector+=HashOrClassRef
  (combinator+=MixinCallCombinator selector+=HashOrClassRef)* OPT_SPACE 
;

MixinParameters:
  {MixinParameters}
  '(' OPT_SPACE
  (parameter+=MixinParameter (sep+=(',' | ';') OPT_SPACE parameter+=MixinParameter)*)?
  varArg=MixinVarParameter? dummySep=';'?
  ')' OPT_SPACE 
;

MixinVarParameter:
  {MixinVarParameter} (sep=(',' | ';') OPT_SPACE)? '...' OPT_SPACE
;

MixinParameter:
    ident=AtVariableDef OPT_SPACE hasDefaultValue?=':' OPT_SPACE term+=Term (SPACE term+=Term)* OPT_SPACE
  | term+=Term (SPACE term+=Term)* OPT_SPACE
;

MixinDefinitionGuards:
  'when' OPT_SPACE guard+=MixinDefinitionGuard (('and' | ',') OPT_SPACE guard+=MixinDefinitionGuard)*
;

MixinDefinitionGuard:
  ('not' OPT_SPACE)? '(' OPT_SPACE expr=MixinDefinitionGuardExpr ')' OPT_SPACE
;

MixinDefinitionGuardExpr:
  term+=MixinDefinitionGuardTerm OPT_SPACE (('>' | '>=' | '=' | '=<' | '<') OPT_SPACE term+=MixinDefinitionGuardTerm OPT_SPACE)? 
;

MixinDefinitionGuardTerm: 
  Term
;

// ----------------------------------------------------------------------------
// RuleSets

ToplevelRuleSet:
  selector+=ToplevelSelector (',' OPT_SPACE selector+=ToplevelSelector)* 
  block=Block
;

InnerRuleSet:
  selector+=InnerSelector (',' OPT_SPACE selector+=InnerSelector)*
  block=Block
;


// ----------------------------------------------------------------------------
// Selectors

// There is a OPT_SPACE after SimpleSelector, because there is no in SimpleSelector
ToplevelSelector:
  selector+=SimpleSelector
  ((combinator+=Combinator selector+=SimpleSelector)* OPT_SPACE extend=Extend?
   | OPT_SPACE guards=MixinDefinitionGuards)
;

// There is a OPT_SPACE after SimpleSelector, because there is no in SimpleSelector
InnerSelector:
  combinator+=RootCombinator selector+=SimpleSelector
  ((combinator+=Combinator selector+=SimpleSelector)* OPT_SPACE extend=Extend?
   | OPT_SPACE guards=MixinDefinitionGuards)
;

// There is a OPT_SPACE after SimpleSelector, because there is no in SimpleSelector
ExtendSelector:
  selector+=SimpleSelector
  (combinator+=Combinator selector+=SimpleSelector)* OPT_SPACE  
;

Combinator:
  {ChildCombinator} OPT_SPACE '>' OPT_SPACE
  | {AdjacentSiblingCombinator} OPT_SPACE '+' OPT_SPACE
  | {GeneralSiblingCombinator} OPT_SPACE '~' OPT_SPACE
  | {DescendantSelector} SPACE
;

RootCombinator returns Combinator:
  {ChildCombinator} '>' OPT_SPACE
  | {AdjacentSiblingCombinator} '+' OPT_SPACE
  | {GeneralSiblingCombinator} '~' OPT_SPACE
  | {DescendantSelector}
;

MixinCallCombinator returns Combinator:
  {ChildCombinator} OPT_SPACE '>' OPT_SPACE
  | {DescendantSelector} SPACE
;

// This rule does not end with OPT_SPACE, because of combinators
SimpleSelector:
  {SimpleSelectorWithRoot} root=RootSelector
  (criteria+=CommonSelector | criteria+=Pseudo)*
  | {SimpleSelectorWithoutRoot} (criteria+=CommonSelector | criteria+=Pseudo)+
;
SimpleSelectorInNot:
  {SimpleSelectorInNotWithRoot} root=RootSelector
  (criteria+=CommonSelector | criteria+=PseudoWithoutNot)*
  | {SimpleSelectorInNotWithoutRoot} (criteria+=CommonSelector | criteria+=PseudoWithoutNot)+
;

RootSelector: {RootSelector} (IDENT_OR_KEYWORD | '*') | RootVariableSelector;
CommonSelector: HashOrClass | VariableSelector | Attrib | {ParentSelector} '&' IDENT_OR_KEYWORD?;

// This terminal is a hack in order to have a custom value converter which prepend a '@'.  See
// the code of org.eclipse.xtext.linking.impl.LinkingHelper.
IDENT_OR_KEYWORD_PREPEND_AT returns ecore::EString: IDENT_OR_KEYWORD;
VariableSelector: (class?=('.' | CLASS_IDENT) | hash?=('#' | HASH_IDENT)) tail=RepeatedAtVariableWithBraces;
RootVariableSelector: IDENT_OR_KEYWORD? tail=RepeatedAtVariableWithBraces;
RepeatedAtVariableWithBraces: (variable+=AtVariableWithBraces OPT_IDENT_TAIL)+;

HashOrClass: Hash | Class;
HashOrClassRef: ident=[HashOrClassRefTarget|HASH_OR_CLASS_IDENT];
HashOrClassRefTarget: HashOrClass | HashOrClassRef;
HASH_OR_CLASS_IDENT returns ecore::EString: HASH_IDENT | CLASS_IDENT;

// This rule does not end with OPT_SPACE, because of combinators
Hash: ident=HASH_IDENT;

// This rule does not end with OPT_SPACE, because of combinators
Class: ident=CLASS_IDENT;
CLASS_IDENT returns ecore::EString: '.' IDENT_OR_KEYWORD;
// We prevent 'when' at some places, otherwise it conflicts with guards in non-mixin selectors.
KEYWORD_BUT_WHEN returns ecore::EString: 'and' | 'even' | 'from' | 'important' | 'n' | 'not' | 'odd' | 'only' | 'to';
IDENT_OR_KEYWORD_BUT_WHEN returns ecore::EString: IDENT | KEYWORD_BUT_WHEN;
IDENT_OR_KEYWORD returns ecore::EString: IDENT_OR_KEYWORD_BUT_WHEN | 'when';
OPT_IDENT_TAIL: ('-'? NUMBER)? IDENT_OR_KEYWORD?;

// This rule does not end with OPT_SPACE, because of combinators
Attrib:
  '[' OPT_SPACE attribute=IDENT_OR_KEYWORD OPT_SPACE 
  (operator=('=' | '~=' | '^=' | '$=' | '|=' | '*=') OPT_SPACE ((value=IDENT_OR_KEYWORD | value=(STRING | NUMBER)) OPT_SPACE)?)? ']'
;

// This rule does not end with OPT_SPACE, because of combinators
Pseudo:
  PseudoWithoutNot
  | {PseudoClassNot} ':' 'not' '(' OPT_SPACE selector=SimpleSelectorInNot OPT_SPACE ')'
;

Extend: ':' 'extend' ExtendArg;
// There is a special terminal for '&:extend', see CustomizedLessLexer.
InnerExtend: AMP_COLON_EXTEND OPT_SPACE ExtendArg ';' OPT_SPACE;
ExtendArg: '(' OPT_SPACE selector+=ExtendSelector (',' OPT_SPACE selector+=ExtendSelector)* ')' OPT_SPACE;

PseudoWithoutNot:
  {PseudoClassIdent} ':' ident=IDENT
  | {PseudoClassFunction} ':' function=IDENT '(' OPT_SPACE (arg=PseudoClassFunctionArgument OPT_SPACE)? ')'
  | {PseudoElement} '::' ident=IDENT  
;

PseudoClassFunctionArgument:
  ident=IDENT
  | nth=PseudoClassNth  //  This includes NUMBER and @{variables}
//  | var=AtVariableTerm
;

PseudoClassNth:
  {PseudoClassNth} (('+' | '-')? NUMBER? | variable+=AtVariableWithBraces) 'n' (OPT_SPACE ('+' | '-') OPT_SPACE (NUMBER | variable+=AtVariableWithBraces))?
  | {PseudoClassNth} ('+' | '-')? NUMBER
  | {PseudoClassNth} variable+=AtVariableWithBraces
  | {PseudoClassNth} ('odd' | 'even')
  | PseudoClassNthSpecialCase
;

PseudoClassNthSpecialCase:
  {PseudoClassNthSpecialCase} ident1=IDENT OPT_SPACE ('+' | '-') OPT_SPACE (NUMBER | variable+=AtVariableWithBraces)  // -n+1
  | {PseudoClassNthSpecialCase} (('+' | '-')? NUMBER | variable+=AtVariableWithBraces) ident2=IDENT  // 1n-1, +1n-1, -1n-1
  | {PseudoClassNthSpecialCase} '+' ident3=IDENT  // +n-1
  | {PseudoClassNthSpecialCase} ident4=IDENT (NUMBER | variable+=AtVariableWithBraces)  // -n- 1
  | {PseudoClassNthSpecialCase} variable+=AtVariableWithBraces ident5=IDENT variable+=AtVariableWithBraces  // @{var}n-@{var}
;

// ----------------------------------------------------------------------------
// Declarations

Declaration:
  star_property_hack?='*'? property=Property OPT_SPACE (merge?='+' OPT_SPACE)? ':' OPT_SPACE expr=Expr 
  priority=Priority ';' OPT_SPACE
;

Priority:
  {Priority} ('!' OPT_SPACE important?='important' OPT_SPACE)?
;

Property:
  {RawProperty} ident=IDENT_OR_KEYWORD 
  | {PropertyWithVariable} ident=IDENT_OR_KEYWORD? variables=RepeatedAtVariableWithBraces
;

// There is a trailing OPT_SPACE in this rule, because there is no in SimpleSelector
// '/' disabled, as it is not properly handled by LESS.
Expr:
  terms+=Term (operators+=Operator terms+=Term)* OPT_SPACE
;

Operator:
  {SpaceOperator} SPACE
  | {ComaOperator} ',' OPT_SPACE
;

// ----------------------------------------------------------------------------
// Terms

// This rule does not end with OPT_SPACE, because of operators in Expr
Term:
    TerminalTerm
  | ExtendedTerm
;

TerminalTerm:
    {IdentTerm} ident=IDENT_OR_KEYWORD_BUT_WHEN
  | {StringTerm} string=STRING
  | {UriTerm} uri=Uri
  | {EscapedStringTerm} '~' string=STRING
  | {JsEvaluationTerm} js=JS_EVALUATION
  | {EscapedJsEvaluationTerm} '~' js=JS_EVALUATION  
;

/*
  a: 2 - 1; -> 3
  b: 2- 1; -> 3
  c: 2 -1; -> 2 -1
  d: 2-1; -> 3
 
 */
ExtendedTerm: ExtendedTerm1;

ExtendedTerm1 returns ExtendedTerm:
  term+=ExtendedTerm2 
  ((SPACE operator+=('+' | '-') SPACE | operator+=('+' | '-')) 
    term+=ExtendedTerm2
  )*
;

ExtendedTerm11 returns ExtendedTerm:
  term+=ExtendedTerm2 
  (OPT_SPACE operator+=('+' | '-') OPT_SPACE term+=ExtendedTerm2)*
;

ExtendedTerm2 returns ExtendedTerm:
  term+=SimpleTerm
  (OPT_SPACE operator+=('*' | '/') OPT_SPACE term+=SimpleTerm)*
;

// This rule does not end with OPT_SPACE, because of operators in Expr
SimpleTerm:
    TerminalSimpleTerm
  | FunctionTerm
  | {ParenthesizedTerm} '(' OPT_SPACE term=ExtendedTerm11 OPT_SPACE ')'
  | {UnaryTerm} operator='-' term=SimpleTerm
;

TerminalSimpleTerm:
    NumericLiteral
  | AtVariableTerm
;

// This rule does not end with OPT_SPACE, because of operators in Expr
FunctionTerm:
  function=(IDENT_OR_KEYWORD_BUT_WHEN | '%') 
  '(' OPT_SPACE (arg=IDENT_OR_KEYWORD OPT_SPACE '=' OPT_SPACE)? (expr=Expr)? ')'
;

// This rule does not end with OPT_SPACE, because of operators in Expr
NumericLiteral:
  {NumberTerm} value=NUMBER
  | {PercentageTerm} value=PERCENTAGE
  | {NumberWithUnitTerm} value=NUMBER unit=IDENT
  | {HashColorTerm} value=HASH_IDENT
;

// This rule does not end with OPT_SPACE, because of operators in Expr
Uri:
  'url(' STRING ')'
  | URL
;

// ****************************************************************************
// Pseudo-terminals

PERCENTAGE returns ecore::EString: NUMBER '%';
AT2_IDENT returns ecore::EString: '@' AT_IDENT;

// This is WS*, not WS?, because whjte-spaces may be split by comments.
OPT_SPACE returns ecore::EString:
  WS*
;

// This is WS+, not WS, because whjte-spaces may be split by comments.
SPACE returns ecore::EString:
  WS+
;

// ****************************************************************************
// Lexer

// The character \f is deleted from the terminals STRING and SPACE, because it
// causes Xtext to crash.  A workaround was to configure Xtext to use XML 1.1,
// but this reveals another bug.

terminal fragment H : '0' .. '9' | 'a' .. 'f' | 'A' .. 'F';
terminal fragment H1_6 : H (H (H (H (H (H)?)?)?)?)?;
terminal fragment UNICODE : '\\' H1_6 ('\r\n' | ' ' | '\t' | '\r' | '\n' /*| '\f' */)?;
terminal fragment ESCAPE : UNICODE | '\\' !('\r' | '\n' /*| '\f'*/ | H);
terminal fragment NL : '\n' | '\r\n' | '\r' /*| '\f'*/;
terminal fragment IDENT_CHAR : ('_'|'a'..'z'|'A'..'Z'|'0'..'9'|'-');
terminal fragment NMSTART: ('_'|'a'..'z'|'A'..'Z') /* | NON_ASCII */ | ESCAPE;
terminal fragment NMCHAR: IDENT_CHAR /* | NON_ASCII */ | ESCAPE;
terminal IDENT : '-'? NMSTART NMCHAR*;
terminal AT_IDENT : '@' IDENT_CHAR+;
terminal fragment STRING1: '"' (!('\n' | '\r' /*| '\f'*/ | '\\' | '\"') | '\\' NL | ESCAPE)* '"';
terminal fragment STRING2: '\'' (!('\n' | '\r' /*| '\f'*/ | '\\' | '\'') | '\\' NL | ESCAPE)* '\'';
terminal STRING : STRING1 | STRING2;

terminal JS_EVALUATION : '`' (!'`')* '`';
// ori: terminal HASH_IDENT : '#' IDENT_CHAR+;
// in CSS identifiers are allowed to contain colons; a colon has to be escaped as '\:' 
terminal HASH_IDENT : '#' (IDENT_CHAR | '\\:')+;
terminal NUMBER : (('0' .. '9')* '.')? ('0' .. '9')+;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT   : '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS : (' ' | '\t' | '\r' | '\n' /*| '\f'*/)+;
terminal URL : 'url(' (!('"' | "'") (!')')*) ')';
terminal ANY_OTHER: .;
terminal AMP_COLON_EXTEND: '*//*-A';  // Fake terminal used by the CustomizedLessLexer
